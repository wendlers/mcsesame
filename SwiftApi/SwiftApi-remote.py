#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TSocket
from thrift.transport import THttpClient
import SwiftApi

from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool addItemToInventory(string authString, string playerName, ItemStack item)'
  print '  bool addToWhitelist(string authString, string name)'
  print '  bool announce(string authString, string message)'
  print '  bool ban(string authString, string name)'
  print '  bool banIp(string authString, string ip)'
  print '  bool deOp(string authString, string name, bool notifyPlayer)'
  print '   getBannedIps(string authString)'
  print '   getBannedPlayers(string authString)'
  print '  string getBukkitVersion(string authString)'
  print '   getConsoleMessages(string authString, i64 since)'
  print '  string getFileContents(string authString, string fileName)'
  print '  OfflinePlayer getOfflinePlayer(string authString, string name)'
  print '   getOfflinePlayers(string authString)'
  print '   getOps(string authString)'
  print '  Player getPlayer(string authString, string name)'
  print '   getPlayers(string authString)'
  print '  Plugin getPlugin(string authString, string name)'
  print '   getPlugins(string authString)'
  print '  Server getServer(string authString)'
  print '  string getServerVersion(string authString)'
  print '   getWhitelist(string authString)'
  print '  World getWorld(string authString, string worldName)'
  print '   getWorlds(string authString)'
  print '  bool installPlugin(string authString, string downloadUrl, string md5)'
  print '  bool kick(string authString, string name, string message)'
  print '  bool op(string authString, string name, bool notifyPlayer)'
  print '  bool ping(string authString)'
  print '  void reloadServer(string authString)'
  print '  bool removeInventoryItem(string authString, string playerName, i32 itemIndex)'
  print '  bool removeFromWhitelist(string authString, string name)'
  print '  bool replacePlugin(string authString, string pluginName, string downloadUrl, string md5)'
  print '  void runConsoleCommand(string authString, string command)'
  print '  bool saveWorld(string authString, string worldName)'
  print '  bool setFileContents(string authString, string fileName, string fileContents)'
  print '  bool setGameMode(string authString, string name, GameMode mode)'
  print '  bool setPvp(string authString, string worldName, bool isPvp)'
  print '  bool setStorm(string authString, string worldName, bool hasStorm)'
  print '  bool setThundering(string authString, string worldName, bool isThundering)'
  print '  bool setWorldTime(string authString, string worldName, i64 time)'
  print '  bool unBan(string authString, string name)'
  print '  bool unBanIp(string authString, string ip)'
  print '  bool updateInventoryItem(string authString, string playerName, ItemStack item, i32 itemIndex)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SwiftApi.Client(protocol)
transport.open()

if cmd == 'addItemToInventory':
  if len(args) != 3:
    print 'addItemToInventory requires 3 args'
    sys.exit(1)
  pp.pprint(client.addItemToInventory(args[0],args[1],eval(args[2]),))

elif cmd == 'addToWhitelist':
  if len(args) != 2:
    print 'addToWhitelist requires 2 args'
    sys.exit(1)
  pp.pprint(client.addToWhitelist(args[0],args[1],))

elif cmd == 'announce':
  if len(args) != 2:
    print 'announce requires 2 args'
    sys.exit(1)
  pp.pprint(client.announce(args[0],args[1],))

elif cmd == 'ban':
  if len(args) != 2:
    print 'ban requires 2 args'
    sys.exit(1)
  pp.pprint(client.ban(args[0],args[1],))

elif cmd == 'banIp':
  if len(args) != 2:
    print 'banIp requires 2 args'
    sys.exit(1)
  pp.pprint(client.banIp(args[0],args[1],))

elif cmd == 'deOp':
  if len(args) != 3:
    print 'deOp requires 3 args'
    sys.exit(1)
  pp.pprint(client.deOp(args[0],args[1],eval(args[2]),))

elif cmd == 'getBannedIps':
  if len(args) != 1:
    print 'getBannedIps requires 1 args'
    sys.exit(1)
  pp.pprint(client.getBannedIps(args[0],))

elif cmd == 'getBannedPlayers':
  if len(args) != 1:
    print 'getBannedPlayers requires 1 args'
    sys.exit(1)
  pp.pprint(client.getBannedPlayers(args[0],))

elif cmd == 'getBukkitVersion':
  if len(args) != 1:
    print 'getBukkitVersion requires 1 args'
    sys.exit(1)
  pp.pprint(client.getBukkitVersion(args[0],))

elif cmd == 'getConsoleMessages':
  if len(args) != 2:
    print 'getConsoleMessages requires 2 args'
    sys.exit(1)
  pp.pprint(client.getConsoleMessages(args[0],eval(args[1]),))

elif cmd == 'getFileContents':
  if len(args) != 2:
    print 'getFileContents requires 2 args'
    sys.exit(1)
  pp.pprint(client.getFileContents(args[0],args[1],))

elif cmd == 'getOfflinePlayer':
  if len(args) != 2:
    print 'getOfflinePlayer requires 2 args'
    sys.exit(1)
  pp.pprint(client.getOfflinePlayer(args[0],args[1],))

elif cmd == 'getOfflinePlayers':
  if len(args) != 1:
    print 'getOfflinePlayers requires 1 args'
    sys.exit(1)
  pp.pprint(client.getOfflinePlayers(args[0],))

elif cmd == 'getOps':
  if len(args) != 1:
    print 'getOps requires 1 args'
    sys.exit(1)
  pp.pprint(client.getOps(args[0],))

elif cmd == 'getPlayer':
  if len(args) != 2:
    print 'getPlayer requires 2 args'
    sys.exit(1)
  pp.pprint(client.getPlayer(args[0],args[1],))

elif cmd == 'getPlayers':
  if len(args) != 1:
    print 'getPlayers requires 1 args'
    sys.exit(1)
  pp.pprint(client.getPlayers(args[0],))

elif cmd == 'getPlugin':
  if len(args) != 2:
    print 'getPlugin requires 2 args'
    sys.exit(1)
  pp.pprint(client.getPlugin(args[0],args[1],))

elif cmd == 'getPlugins':
  if len(args) != 1:
    print 'getPlugins requires 1 args'
    sys.exit(1)
  pp.pprint(client.getPlugins(args[0],))

elif cmd == 'getServer':
  if len(args) != 1:
    print 'getServer requires 1 args'
    sys.exit(1)
  pp.pprint(client.getServer(args[0],))

elif cmd == 'getServerVersion':
  if len(args) != 1:
    print 'getServerVersion requires 1 args'
    sys.exit(1)
  pp.pprint(client.getServerVersion(args[0],))

elif cmd == 'getWhitelist':
  if len(args) != 1:
    print 'getWhitelist requires 1 args'
    sys.exit(1)
  pp.pprint(client.getWhitelist(args[0],))

elif cmd == 'getWorld':
  if len(args) != 2:
    print 'getWorld requires 2 args'
    sys.exit(1)
  pp.pprint(client.getWorld(args[0],args[1],))

elif cmd == 'getWorlds':
  if len(args) != 1:
    print 'getWorlds requires 1 args'
    sys.exit(1)
  pp.pprint(client.getWorlds(args[0],))

elif cmd == 'installPlugin':
  if len(args) != 3:
    print 'installPlugin requires 3 args'
    sys.exit(1)
  pp.pprint(client.installPlugin(args[0],args[1],args[2],))

elif cmd == 'kick':
  if len(args) != 3:
    print 'kick requires 3 args'
    sys.exit(1)
  pp.pprint(client.kick(args[0],args[1],args[2],))

elif cmd == 'op':
  if len(args) != 3:
    print 'op requires 3 args'
    sys.exit(1)
  pp.pprint(client.op(args[0],args[1],eval(args[2]),))

elif cmd == 'ping':
  if len(args) != 1:
    print 'ping requires 1 args'
    sys.exit(1)
  pp.pprint(client.ping(args[0],))

elif cmd == 'reloadServer':
  if len(args) != 1:
    print 'reloadServer requires 1 args'
    sys.exit(1)
  pp.pprint(client.reloadServer(args[0],))

elif cmd == 'removeInventoryItem':
  if len(args) != 3:
    print 'removeInventoryItem requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeInventoryItem(args[0],args[1],eval(args[2]),))

elif cmd == 'removeFromWhitelist':
  if len(args) != 2:
    print 'removeFromWhitelist requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeFromWhitelist(args[0],args[1],))

elif cmd == 'replacePlugin':
  if len(args) != 4:
    print 'replacePlugin requires 4 args'
    sys.exit(1)
  pp.pprint(client.replacePlugin(args[0],args[1],args[2],args[3],))

elif cmd == 'runConsoleCommand':
  if len(args) != 2:
    print 'runConsoleCommand requires 2 args'
    sys.exit(1)
  pp.pprint(client.runConsoleCommand(args[0],args[1],))

elif cmd == 'saveWorld':
  if len(args) != 2:
    print 'saveWorld requires 2 args'
    sys.exit(1)
  pp.pprint(client.saveWorld(args[0],args[1],))

elif cmd == 'setFileContents':
  if len(args) != 3:
    print 'setFileContents requires 3 args'
    sys.exit(1)
  pp.pprint(client.setFileContents(args[0],args[1],args[2],))

elif cmd == 'setGameMode':
  if len(args) != 3:
    print 'setGameMode requires 3 args'
    sys.exit(1)
  pp.pprint(client.setGameMode(args[0],args[1],eval(args[2]),))

elif cmd == 'setPvp':
  if len(args) != 3:
    print 'setPvp requires 3 args'
    sys.exit(1)
  pp.pprint(client.setPvp(args[0],args[1],eval(args[2]),))

elif cmd == 'setStorm':
  if len(args) != 3:
    print 'setStorm requires 3 args'
    sys.exit(1)
  pp.pprint(client.setStorm(args[0],args[1],eval(args[2]),))

elif cmd == 'setThundering':
  if len(args) != 3:
    print 'setThundering requires 3 args'
    sys.exit(1)
  pp.pprint(client.setThundering(args[0],args[1],eval(args[2]),))

elif cmd == 'setWorldTime':
  if len(args) != 3:
    print 'setWorldTime requires 3 args'
    sys.exit(1)
  pp.pprint(client.setWorldTime(args[0],args[1],eval(args[2]),))

elif cmd == 'unBan':
  if len(args) != 2:
    print 'unBan requires 2 args'
    sys.exit(1)
  pp.pprint(client.unBan(args[0],args[1],))

elif cmd == 'unBanIp':
  if len(args) != 2:
    print 'unBanIp requires 2 args'
    sys.exit(1)
  pp.pprint(client.unBanIp(args[0],args[1],))

elif cmd == 'updateInventoryItem':
  if len(args) != 4:
    print 'updateInventoryItem requires 4 args'
    sys.exit(1)
  pp.pprint(client.updateInventoryItem(args[0],args[1],eval(args[2]),eval(args[3]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
